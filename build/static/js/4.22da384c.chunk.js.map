{"version":3,"sources":["views/Pages/Inputs/create_contact.js","views/Pages/Contacts/contact_list.js","views/Pages/Contacts/contacts.js"],"names":["CreateCon","props","_this","Object","_goinfre_vsibanyo_brimis_crm_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_goinfre_vsibanyo_brimis_crm_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_goinfre_vsibanyo_brimis_crm_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","postInfo","bind","_goinfre_vsibanyo_brimis_crm_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleInputs","state","id_value","firstName","lastName","mobileContact","email","client","contact","workContact","designation","key","e","target","value","setState","axios","post","then","response","console","log","catch","error","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","row","className","xs","htmlFor","type","name","placeholder","onChange","size","color","onClick","Component","ContactList","classCallCheck","possibleConstructorReturn","getPrototypeOf","list","getContactDetails","contactID","fetchPost","fetch","res","json","data","err","_this3","view","map","item","index_num","react_default","reactstrap_es","tag","href","update","rel","List","connect","dispatch","contactDetails","Contacts","onUpdate","name_got","toggle","assertThisInitialized","handleChange","submitHandler","activeTab","evt","preventDefault","handlerFromParent","tab","tabs","classnames","active","tabId","action","method","sm","id","contact_list","create_contact"],"mappings":"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","file":"static/js/4.22da384c.chunk.js","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport {\n    Col,\n    Nav,\n    NavItem,\n    NavLink,\n    Row,\n    TabContent,\n    TabPane,\n    Form,\n    FormGroup,\n    Button,\n    Input,\n    Label,\n}\n    from 'reactstrap';\nimport axios from 'axios';\n    \nclass CreateCon extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.postInfo = this.postInfo.bind(this);\n        this.handleInputs = this.handleInputs.bind(this);\n\n        this.state = {\n            id_value: \"\",\n            firstName: '',\n            lastName: '',\n            mobileContact: '',\n            email: '',\n            client: '',\n            contact: '',\n            workContact: '',\n            designation: ''\n        }\n    }\n\n    handleInputs(key) {\n        return function (e) {\n            var state = {};\n            state[key] = e.target.value;\n            this.setState(state);\n        }.bind(this);\n    }\n\n    postInfo() {\n        axios.post('https://brimis-crm-backend.herokuapp.com/crm/contacts/create/', {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            mobileContact: this.state.mobileContact,\n            email: this.state.email,\n        })\n        .then(function (response) {\n            console.log(response);\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n        axios.post('https://brimis-crm-backend.herokuapp.com/crm/clientcontacts/create/', {\n            client: this.state.client,\n            contact: this.state.contact,\n            workContact: this.state.workContact,\n            designation: this.state.designation\n        })\n        .then(function (response) {\n            console.log(response);\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    render() {\n        return (\n            <Row>\n                <Col>\n                    <FormGroup row className=\"my-0\" >\n                        <Col xs=\"6\">\n                            < FormGroup >\n                                <Label htmlFor=\"firstName\" > Name </Label>\n                                <Input type=\"text\" name=\"firstName\" placeholder=\"Enter name\" onChange={this.handleInputs(\"firstName\")}/>\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"6\">\n                            <FormGroup >\n                                <Label htmlFor=\"lastName\" > Surname </Label>\n                                <Input type=\"text\" name=\"lastName\" placeholder=\"Enter surname\" onChange={this.handleInputs(\"lastName\")}/>\n                            </FormGroup>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row className=\"my-0\" >\n                        <Col xs=\"6\" >\n                            <FormGroup >\n                                <Label htmlFor=\"email\" > Email Address </Label>\n                                <Input type=\"text\" name=\"email\" placeholder=\"Enter email address\" onChange={this.handleInputs(\"email\")}/>\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"6\" >\n                            <FormGroup >\n                                <Label htmlFor=\"mobileContact\" > Phone Number </Label>\n                                <Input type=\"text\" name=\"mobileContact\" placeholder=\"Enter phone number\" onChange={this.handleInputs(\"mobileContact\")}/>\n                            </FormGroup>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row className=\"my-0\" >\n                        <Col xs=\"6\" >\n                            <FormGroup>\n                                <Label htmlFor=\"client\" > Company </Label>\n                                <Input type=\"text\" name=\"client\" placeholder=\"Enter company\" onChange={this.handleInputs(\"client\")}/>\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"6\" >\n                            <FormGroup>\n                                <Label htmlFor=\"workContact\" > Work Number </Label>\n                                <Input type=\"text\" name=\"workContact\" placeholder=\"Enter Work Number\" onChange={this.handleInputs(\"workContact\")}/>\n                            </FormGroup>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup >\n                        <Label htmlFor=\"designation\" > Work Position </Label>\n                        <Input type=\"text\" name=\"designation\" placeholder=\"Enter work position\" onChange={this.handleInputs(\"designation\")}/>\n                    </FormGroup>\n                    <Button type=\"submit\" size=\"sm\" color=\"primary\" onClick={() => this.postInfo()}> < i className=\"fa fa-user\" > </i>Submit</Button >\n                    <Button type=\"reset\" size=\"sm\" color=\"danger\"><i className=\"fa fa-ban\"></i> Reset</Button>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default CreateCon;","import React, {\n    Component\n} from 'react';\nimport { Col, ListGroup, ListGroupItem, Row, } from 'reactstrap';\nimport { connect } from \"react-redux\";\nimport { getContactDetails } from \"../../redux/actions/index\"\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getContactDetails: contactDetails => dispatch(getContactDetails(contactDetails))\n    };\n};\n\nclass ContactList extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            list: [],\n            firstName: \"\",\n        }\n    }\n\n    update(firstName, lastName, mobileContact, email) {\n        console.log(firstName);\n        const contactID = 100;\n        getContactDetails({contactID, firstName, lastName, mobileContact, email});\n        this.setState({firstName: firstName});\n    }\n\n    componentDidMount() {\n        this.fetchPost();\n    }\n\n    fetchPost() {\n\n        fetch('https://brimis-crm-backend.herokuapp.com/crm/contacts/')\n        .then(res => {\n            return res.json();\n        })\n        .then(data => {\n            this.setState({\n                list: data\n            });\n        })\n        .catch(err => {\n            console.log(err);\n        });\n    }\n\n    render() {\n        const view = this.state.list.map((item, index_num) => \n            <ListGroupItem key={index_num} tag=\"a\" href=\"#/contacts/details\" onClick={() => this.update(item.firstName, item.lastName, item.mobileContact, item.email)}> {item.firstName} {item.lastName}\n                <div className=\"card-header-actions\">\n                    <a href=\"#\" rel=\"noreferrer noopener\" className=\"card-header-action\">\n                    <small className=\"text-muted\">delete</small>\n                    </a>\n                </div>\n                <div className=\"card-header-actions\">\n                    <a href=\"#\" rel=\"noreferrer noopener\" className=\"card-header-action\">\n                    <small className=\"text-muted\">edit</small>\n                    </a>\n                </div>\n            </ListGroupItem>\n        )\n        return (\n            <Row>\n                <Col>\n                    <ListGroup>\n                        {view}\n                    </ListGroup>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nconst List = connect(null, mapDispatchToProps)(ContactList)\n          \nexport default List;","import React, {\n  Component\n}\nfrom 'react';\nimport {\n  Col,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane,\n  Form,\n  FormGroup,\n  Button,\n  Input,\n  Label,\n}\nfrom 'reactstrap';\nimport classnames from 'classnames';\nimport ContactList from './contact_list'\nimport CreateCon from '../Inputs/create_contact'\n\nclass Contacts extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.submitHandler = this.submitHandler.bind(this);\n        this.state = {\n            activeTab: '1',\n            name_got: \"\",\n        };\n    }\n\n    submitHandler(evt){\n        evt.preventDefault();\n\n        this.props.handlerFromParent(this.state.name_got);\n\n        this.setState({\n            name_got: ''\n        });\n    }\n\n    handleChange() {\n        this.setState({\n            name_got: \"Eureka!\"\n        })\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.setState({\n                activeTab: tab,\n            });\n        }\n    }\n\n    onUpdate = (name) => {\n        //this.name_got= name,\n        console.log(\"contact: \" + this.name_got);\n    }\n\n  render() {\n\n    return ( \n        <div>\n            <Row>\n                <Col>\n                    <Nav tabs>\n                        <NavItem>\n                            <NavLink className = {\n                                classnames({\n                                    active: this.state.activeTab === '1'\n                                })\n                            }\n                            onClick = {\n                                () => {\n                                    this.toggle('1');\n                                }\n                            } >\n                                Search \n                            </NavLink> \n                        </NavItem>\n                        <NavItem>\n                            <NavLink className = {\n                                classnames({\n                                    active: this.state.activeTab === '2'\n                                })\n                            }\n                            onClick = {\n                                () => {\n                                    this.toggle('2');\n                                }\n                            } >\n                                Create Contact\n                            </NavLink>\n                        </NavItem> \n                    </Nav>\n                    <TabContent activeTab = {\n                        this.state.activeTab\n                    } >\n                        <TabPane tabId = \"1\" >\n                            <Form action = \"\" method = \"post\" className = \"form-horizontal\">\n                                <FormGroup row>\n                                    <Col sm = \"12\">\n                                        <Input type=\"search\" name=\"search\" id=\"taskSearch\" placeholder=\"Search contacts\" />\n                                        {/* <Input type = \"text\" placeholder = \"Search\" /> */}\n                                    </Col>\n                                    {/* <Button type = \"submit\" size = \"sm\" color = \"primary\" > < i className = \"fa fa-user\" > </i>Search</Button> */}\n                                </FormGroup>\n                            </Form>\n                            <ContactList onUpdate={this.onUpdate}/>\n                        </TabPane>\n                        <TabPane tabId=\"2\" >\n                            <Col sm = \"12\">\n                                <CreateCon />\n                            </Col>\n                        </TabPane>\n                    </TabContent>\n                </Col>\n            </Row>\n        </div>\n    );\n  }\n}\n\nexport default Contacts;"],"sourceRoot":""}